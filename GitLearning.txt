git init
git add
git commit -m "version explaination" ("-a" for "--all")

git status
git diff <filename> (to highlight the difference)
git diff HEAD -- <filename> (to show the difference between file in workplace and newest version)

git log
git log --pretty=oneline
git reflog (show your command in history)
git reset --hard <commit_id>
git reset --hard ^HEAD  (to move back)
git reset --hard HEAD^  (to mave on)


//3 ways to go back:
--------------------------------
//1-havent been added or commited
git checkout -- <filename> (to let the file in workplace turn to the last version added or commited)
//2-have been added but not commited
git reset HEAD <filename> 
//3-have been commited (must not been uploaded to the remote repository)
git reset --hard <id>
----------------------------------


File delete:
rm <filename> (to delete in the repository)
git rm <filename> (to delete in the stage)
--------------------------
use them together with former commands.



Link to a remote repository:
|    git remote add https://github.com/<user>/<repositoryname>
|or  git remote add git@github.com:<user>/<repositoryname>
git push -u origin master   (first time to push)
git push origin master

Clone:
|    git clone https://github.com/<user>/<repositoryname>
|or  git clone add git@github.com:<user>/<repositoryname>
----------------------------------------------
best use the git protocal rather than http


Set branches:
git checkout-b dev
equals to:
git branch dev   (establish a branch "dev")
git checkout dev (switch to branch "dev")

git branch       (to check the status of branches)

git log --graph --pretty=oneline --abbrev-commit

git merge --no-ff -m "<explaination>" <branch_name>

git branch -d <branch_name>
git branch -D <branch_name>
-------------------------------------------------

git stash
git stash list
git stash pop
git stash apply stash@{0}
-----------------------------

git remote     (to check the origin)
git remote -v  (to check the address of origin)
git push origin <branch_name>



****************************


